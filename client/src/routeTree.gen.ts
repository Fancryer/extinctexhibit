/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ParticipantsIndexImport } from './routes/participants/index'
import { Route as NewsIndexImport } from './routes/news/index'
import { Route as HallsIndexImport } from './routes/halls/index'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as ProfileProfileIdImport } from './routes/profile.$profileId'
import { Route as NewsCreateImport } from './routes/news/create'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as NewsEditNewsIdImport } from './routes/news/edit.$newsId'
import { Route as AuthVerifyAccessTokenImport } from './routes/auth/verify.$accessToken'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ParticipantsIndexRoute = ParticipantsIndexImport.update({
  id: '/participants/',
  path: '/participants/',
  getParentRoute: () => rootRoute,
} as any)

const NewsIndexRoute = NewsIndexImport.update({
  id: '/news/',
  path: '/news/',
  getParentRoute: () => rootRoute,
} as any)

const HallsIndexRoute = HallsIndexImport.update({
  id: '/halls/',
  path: '/halls/',
  getParentRoute: () => rootRoute,
} as any)

const EventsIndexRoute = EventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileProfileIdRoute = ProfileProfileIdImport.update({
  id: '/profile/$profileId',
  path: '/profile/$profileId',
  getParentRoute: () => rootRoute,
} as any)

const NewsCreateRoute = NewsCreateImport.update({
  id: '/news/create',
  path: '/news/create',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const NewsEditNewsIdRoute = NewsEditNewsIdImport.update({
  id: '/news/edit/$newsId',
  path: '/news/edit/$newsId',
  getParentRoute: () => rootRoute,
} as any)

const AuthVerifyAccessTokenRoute = AuthVerifyAccessTokenImport.update({
  id: '/auth/verify/$accessToken',
  path: '/auth/verify/$accessToken',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/news/create': {
      id: '/news/create'
      path: '/news/create'
      fullPath: '/news/create'
      preLoaderRoute: typeof NewsCreateImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileId': {
      id: '/profile/$profileId'
      path: '/profile/$profileId'
      fullPath: '/profile/$profileId'
      preLoaderRoute: typeof ProfileProfileIdImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
    '/halls/': {
      id: '/halls/'
      path: '/halls'
      fullPath: '/halls'
      preLoaderRoute: typeof HallsIndexImport
      parentRoute: typeof rootRoute
    }
    '/news/': {
      id: '/news/'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsIndexImport
      parentRoute: typeof rootRoute
    }
    '/participants/': {
      id: '/participants/'
      path: '/participants'
      fullPath: '/participants'
      preLoaderRoute: typeof ParticipantsIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/verify/$accessToken': {
      id: '/auth/verify/$accessToken'
      path: '/auth/verify/$accessToken'
      fullPath: '/auth/verify/$accessToken'
      preLoaderRoute: typeof AuthVerifyAccessTokenImport
      parentRoute: typeof rootRoute
    }
    '/news/edit/$newsId': {
      id: '/news/edit/$newsId'
      path: '/news/edit/$newsId'
      fullPath: '/news/edit/$newsId'
      preLoaderRoute: typeof NewsEditNewsIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/news/create': typeof NewsCreateRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/events': typeof EventsIndexRoute
  '/halls': typeof HallsIndexRoute
  '/news': typeof NewsIndexRoute
  '/participants': typeof ParticipantsIndexRoute
  '/auth/verify/$accessToken': typeof AuthVerifyAccessTokenRoute
  '/news/edit/$newsId': typeof NewsEditNewsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/news/create': typeof NewsCreateRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/events': typeof EventsIndexRoute
  '/halls': typeof HallsIndexRoute
  '/news': typeof NewsIndexRoute
  '/participants': typeof ParticipantsIndexRoute
  '/auth/verify/$accessToken': typeof AuthVerifyAccessTokenRoute
  '/news/edit/$newsId': typeof NewsEditNewsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/news/create': typeof NewsCreateRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/events/': typeof EventsIndexRoute
  '/halls/': typeof HallsIndexRoute
  '/news/': typeof NewsIndexRoute
  '/participants/': typeof ParticipantsIndexRoute
  '/auth/verify/$accessToken': typeof AuthVerifyAccessTokenRoute
  '/news/edit/$newsId': typeof NewsEditNewsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/news/create'
    | '/profile/$profileId'
    | '/events'
    | '/halls'
    | '/news'
    | '/participants'
    | '/auth/verify/$accessToken'
    | '/news/edit/$newsId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/news/create'
    | '/profile/$profileId'
    | '/events'
    | '/halls'
    | '/news'
    | '/participants'
    | '/auth/verify/$accessToken'
    | '/news/edit/$newsId'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/news/create'
    | '/profile/$profileId'
    | '/events/'
    | '/halls/'
    | '/news/'
    | '/participants/'
    | '/auth/verify/$accessToken'
    | '/news/edit/$newsId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  NewsCreateRoute: typeof NewsCreateRoute
  ProfileProfileIdRoute: typeof ProfileProfileIdRoute
  EventsIndexRoute: typeof EventsIndexRoute
  HallsIndexRoute: typeof HallsIndexRoute
  NewsIndexRoute: typeof NewsIndexRoute
  ParticipantsIndexRoute: typeof ParticipantsIndexRoute
  AuthVerifyAccessTokenRoute: typeof AuthVerifyAccessTokenRoute
  NewsEditNewsIdRoute: typeof NewsEditNewsIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  NewsCreateRoute: NewsCreateRoute,
  ProfileProfileIdRoute: ProfileProfileIdRoute,
  EventsIndexRoute: EventsIndexRoute,
  HallsIndexRoute: HallsIndexRoute,
  NewsIndexRoute: NewsIndexRoute,
  ParticipantsIndexRoute: ParticipantsIndexRoute,
  AuthVerifyAccessTokenRoute: AuthVerifyAccessTokenRoute,
  NewsEditNewsIdRoute: NewsEditNewsIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/auth/register",
        "/news/create",
        "/profile/$profileId",
        "/events/",
        "/halls/",
        "/news/",
        "/participants/",
        "/auth/verify/$accessToken",
        "/news/edit/$newsId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/news/create": {
      "filePath": "news/create.tsx"
    },
    "/profile/$profileId": {
      "filePath": "profile.$profileId.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    },
    "/halls/": {
      "filePath": "halls/index.tsx"
    },
    "/news/": {
      "filePath": "news/index.tsx"
    },
    "/participants/": {
      "filePath": "participants/index.tsx"
    },
    "/auth/verify/$accessToken": {
      "filePath": "auth/verify.$accessToken.tsx"
    },
    "/news/edit/$newsId": {
      "filePath": "news/edit.$newsId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
